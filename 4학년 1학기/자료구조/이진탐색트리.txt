이진 탐색 트리

-레코드(record)
-필드(field)
-테이블(table)
-키(key)
-주요키(primary key)

테이블 안에 레코드들이 있고 정보의 종류에 따라 필드가 추가되는 구조

-key(왼쪽서브트리)<=key(루트노드)<=key(오른쪽서브트리)
-이진탐색을 중위순회하면 오름차순으로 정렬된 값을 얻을 수 있다.

*탐색연산

-비교한 결과가 같으면 탐색이 성공적으로 끝난다.
-키 값이 루트보다 작으면 -> 왼쪽 자식을 기준으로 다시 탐색
-키 값이 루트보다 크면 -> 오른쪽 자식을 기준으로 다시 탐색

코드방법

순환적인 구현(가독성상 이점)

반복적인 구현(성능상 이점)

*삽입연산
탐색에 실패한 위치가 바로 새로운 노드를 삽입하는 위치
시간복잡도 Complete Binary Search Tree O(logn) 
	InComplete Binary Serach Tree O(n)

*삭제연산

삭제시 그 부모 노드에 붙여준다.

*성능

최선의경우 -> 이진 트리가 균형적으로 생성되어 있는 경우 : h = log2n
		O(logn)

최악의경우 -> 경사이진트리 : h = n
		O(n)

*AVL 트리

삽입과 삭제를 하고 난 다음에 균형이 깨질 것 같으면 균형을 알아서 맞춰준다.

평균, 최선, 최악 시간 복잡도 모두 O(logn)이다.
