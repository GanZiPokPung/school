*객체, 모델, 메쉬

객체들의 겉모양 -> 3d
겉모양을 표현하는 3d 데이타 -> 모델(메쉬), 객체
어떤 물체(객체)들의 겉모양을 표현하기 위함
내부는 보이지 않기 때문에 중요하지 않음
다각형(삼각형)(연결된 선분들의 집합)을 구성하고 있는 면을 그린다.
면들의 집합(또는 삼각형들의 집합) -> 메쉬
연결된 점(실수집합)들의 집합->다각형을 구성할수 있음->면을 구성가능

*기하학적 모델링

직육면체

인간은 최대 3개의 면만 볼수 있다.(나머지는 은면(Back Face))
전면(보이는면)이냐 은면이냐는 상대적이다. -> 수학적인 처리가 필요함
수학적으로 표현하고 수학적으로 해결

T(Transform) 		   L(Lighting)
면을 구성하는 점의 위치 	      광원색

*2차원에서의 기하학

점을 구성하기 위한 좌표계 -> 화면으로 옮긴다.

화면에 옮기기 위한 화면 좌표계
화면 좌표계 : 화면은 2D이다. 물리적인 전자장치로 이루어진 픽셀집합
	   픽셀이기 때문에 좌표의 단위는 정수로 되어 있다.
	   좌상단부터 (0, 0)이다.(하지만 플랫폼마다 다를수 있다)
	   (유니티 같은 경우에는 좌하단부터)
직교 좌표계

*3차원에서의 기하학

점(Vector)(실수3개)의 표현 = (x, y, z)
float x, float y, flaot z

다루기 가장 쉬운 직교 좌표계를 사용한다.
direct3d에서는 왼손 좌표계를 사용한다.
오른손 좌표계 -> OpenGL, 3D Max 등
오른손, 왼손의 좌표계의 공통점은 서로 직교하게 만들수 있음.
둘다 y축이 Up인 좌표계를 사용한다.
차이점은 z축이 서로 반대로 되어 있다.

x(Right Vector) y(Up Vector) z(Look Vector)

3D Max는 Local 좌표계를 사용한다.

* 3차원에서의 기하학

-메쉬의 표현
struct Vertex
{
float x, y, z;
};
struct Polygon
{
UINT nVertices;
Vertex *pVertices; //점들의 집합
};
struct Mesh
{
UINT nFaces;
Polygon *pFaces;   //면들의 집합
};

객체지향 Programming -> 게임세상(World)

* 모델의 표현

-모델 좌표계(Model Space)(Local Space)
원점(중요치 않음)(0, 0, 0)
객체좌표계하고 일치하게 만드는 것이 좋다.
하지만 다를수도 있다.

-월드 좌표계
게임 세상의 기준(World)을 표현하기 위한 좌표계
전역 좌표계라고 불리기도 한다.
모든 메쉬들이 동일한 하나의 좌표계로 표현

* 모델과 객체

모델(메쉬(기하학적 모델)) -> 형태가 바뀌지 않음을 전제로 한다.
객체는 위치, 방향등으로 바뀔수 있지만 모델 자체는 바뀌지 않는다.

객체 -> 3D 모델을 재사용
Instancing -> 객체를 재사용
객체의 정보를 공유하고 재사용 -> Instance

* 메쉬와 텍스쳐 매핑
맵(Map) : 2D 이미지(Image)
매핑(Mapping) : 2D 이미지 3D 렌더링 과정에서 사용

높이 맵(Height)
텍스쳐 맵(Texture)
법선 맵(Normal)
범프 맵(Bump)
조명 맵(Light)

High Polygon, Low Polygon

메쉬
-> 텍스쳐 매핑(Texture Mapping)

* 게임 월드의 단위
개발자는 게임 월드의 크기와 단위를 결정하기 위해 아티스트와 협력해야 함

정적(Static) : 움직이지 않음(가급적이면 2D로 사용하면 최적화)

>> 효과적으로 사용하기 위해...
1. Batch(일괄) 처리 
-> 그림을 그린다고 가정했을때 동일한 색깔을 캔버스 안에서 그려야 할곳에 다 그린다음 더 그릴 필요가 없다면 다른 색깔을 칠하는 방식을 취하는 것을 예로 들 수 있다.-->Overhead를 줄일 수 있다!
(Sorting)
2. 미리 계산

매핑의 디테일에 따라서 월드가 커보이게 할 수 있다.
Frame Rate와의 연관이 있을 수 있다.

* 다각형 와Mesh인딩 순서
-은면 제거(Back Face Culling)
은면을 렌더링의 대상에서 제외하는 작업

-정점(Vertex)
-와인딩 순서(Winding Order)
은면 제거 작업을 위해 안보이는 면을 판단하기 위해서는
정점의 나열 순서들을 일관된 방법으로 표현하는 것이 필요하다.
Clockwise, Reverse Clockwise -> 시계, 반시계 방향 나열
면의 정점순서가 시계->보이는 면
면의 정점순서가 반시계->안보이는 면
--보이는 면의 변을 외적하면 나를 바라보는 방향이 나온다.
--안보이는 면의 변을 외적하면 객체의 내부를 바라보는 방향이 나온다.

* 다각형 와인딩 순서









