*IDXGIFactory::CreateSwapChain() 함수
-렌더링을 하려면 스왑 체인(프레임 버퍼)이 필요

*DXGI_SWAP_CHAIN_DESC 구조체

DXGI_MODE_DESC BufferDesc 
-> 후면 버퍼를 만들면 전면은 자동으로 만들어진다.
DXGI_SAMPLE_DESC SampleDesc
-> 다중 샘플링
DXGI_USAGE BufferUsage
-> 응용 프로그램에서 어떻게 접근 할 것인가? 를 정함

UINT BUfferCount
-> 버퍼 몇개?
HWND OutputWindow
-> 모든 App은 윈도우 핸들을 가진다. 그려질 윈도우를  Set 하는 것, 메인 윈도우 핸들
BOOL Windowed
-> 창모드, 전체화면모드?
DXGI_SWAP_EFFECT SwapEffect
-> SWAP 전면버퍼, 후면버퍼를 바꾸는 것을 어떻게 처리할 것인가를 지정한다.
UINT Flags
-> 추가적인 Option들을 표현

-DXGI_USAGE
주어 -> 다 CPU
SwapChain은 렌더링을 하기 위해 만드는 것이기 때문에 보통은 DXGI_USAGE_RENDER_TARGET_OUPUT을 쓴다.
후면 버퍼를 렌더 타겟 출력으로 사용할 것이다..

모든 3D 렌더링의 데이터들은(전면 후면 버퍼도) 비디오 메모리에 있다. CPU가 비디오 카드로 접근 하려면 어떤 용도로 사용하도록만 허락할 것이다. 그것이 허용이 되면 SWAP CHAIN이 만들어진다.

BACK_BUFFER --> 이제 RENDER_TARGET_OUTPUT

-DXGI_SWAP_EFFECT
SWAP 방법은 크게 두가지
FLIP(하드웨어를 순식간에 바꾸는것), Blt(복사)

전면버퍼, 후면버퍼를 SWAP하고 전면버퍼를 지우자.. 새로 그릴 거니까.. 낭비를 안하고.. DISCARD를 쓰면 좀 더 빠른 렌더링이 가능하다.

SEQUENTIAL 방식은 버퍼가 3개 있을때 쓰인다.(보통은 안씀)

-DXGI_SWAP_CHAIN_FLAG
NONPREROTATED -> 핸드폰 처럼 화면 회전 모드 같은 경우는 화면이 바뀌니까 ROTATED를 하지 마라..
ALLOW_MODE_SWITCH -> 전환하는 것을 허용, 응용 프로그램이 디스플레이 모드를 변경할 수 있음
바탕화면의 해상도를 응용 프로그램으로 부터 바꿀것..
그래야 해상도가 바뀌니까.
GDI_COMPATIBLE -> 보통 쓰지 않을것..

-왜 Flags는 enum값이 아닌가?
DXGI_USAGE가 UINT라고 가정해보자. 각각 1, 2, 4, 8 이런식의 값일 수도 있다. 만약 UINT로 사용한다면 컴파일러가 warning을 내밷는다. 
Flags는 | 연산을 이용하여 여러 Flag를 쓸 수 있도록 하겠다는 의미이므로 받는 타입이 enum이 아니다. 

*DXGI_MODE_DESC
Width, Height
->후면 버퍼의 가로 세로 크기
DXGI_RATIONAL RefreshRate
-> 1초에 몇번 화면 갱신 비율이 일어날것인가? 이상적인 값을 설정할 수 있음. (Hz단위), 유리수로 (정수 / 정수)
DXGI_FORMAT Format
->나중에 보자
DXGI_MODE_SCANLINE_ORDER
->스캔 라인 (한줄 씩 그릴때) 모든 줄을 순서대로 
UPPER_FIELD -> 홀수번째 줄
LOWER_FIELD -> 짝수번째 줄 
>> 오늘날은 보기 힘듬 보통 PROGRESSIVE 
보통은 지정해주지 않아서 가장 최선의 방법을 알아서 찾을 수 있게 해주는 UNSPECIFIED를 쓴다.

DXGI_MODE_SCALING 
UNSPECIFIED가 가장 많이 쓰임
CENTERED
STRETCHED 

*DXGI_FORMAT
한 픽셀이 어떤 방식으로 표현하는지를 설정해주는 포맷형식

전면버퍼 = 화면 (같도록)
Depth -> 카메라 Z값 0 ~ 1.f까지 
Stencil

DXGI_FORMAT_R8G8B8A8_UNORM 
RGBA가 각각 8비트로 총 32비트(4바이트)

맨 뒤에는 각각이 어떤 Type인지를 지정해주는 것.

NORM(Normalized) : 정규화된 실수
SNORM -> -1.f ~ 1.f 
UNORM -> 0 ~ 1.f

많이 사용되는 것은 DXGI_FORMAT_R8G8B8A8_UNORM이다픽셀 메모리도 적당하면서 여러 색을 표현이 가능하다.

그래픽카드는 모든 픽셀들의 값을 Normalize된 형태를 기본으로 하기 때문에 NORM을 써서 넘겨주는게 좋음

_TYPELESS -> 타입이 많다.(타입이 정해지지 않았다.)
_SRGB -> Standard RGB (감마 커렉션 : 인터넷에서 			찾아보자)

* 다중 샘플링(Multi-Sampling)

디지털 출력장치 -> 가로선, 세로선을 그릴때에는 문제가
없는데 대각선 같은 경우는 계단현상(Aliasing)이 나타날 수 있다. -> 왜냐하면 픽셀의 크기가 크기 때문에 나타나는 현상이다. 

>> 픽셀의 크기를 줄이면 된다! (해상도를 늘리면)
>> 최대로 줄일 수 있는 크기는 최소로 정해져 있어서.
그것 이상으로는 작게 할 수 없다. 
>> 하지만 무한대로 쪼갠다면? 가능

이걸 없애는 것이 Anti Aliasing
Anti Alising 기법
-슈퍼 샘플링 : 4X 가로 두배 세로 두배로 크게 만들어 후면버퍼에 그리게 하는 기법. 픽셀의 개수가 4배가 된다.
(렌더링 시간 4배)

부분에 있는 픽셀들을 골라서(고르는 방법은 무수히 많음) 
사용?
Filtering

주변 픽셀을 검사하여 그 픽셀 색의 평균(샘플링)을 구하여 픽셀 색상을 구함.

-다중 샘플링
MSAA(Multi-Sample Anti-Aliasing) : 4X

슈퍼 샘플링보다 연산량이 적어 프레임레이트에 이점이 있다.

서브 픽셀 색상을 한번만 결정
가시성 판단 -> 포함 여부 검사 

이러한 기능을 하드웨어(GPU)가 가지고 있어야 빠르기 때문에 이러한 기능이 있어야만 사용이 가능하다.

DXGI_SAMPLE_DESC
-> UINT Count 
4 : MSAA
1 : MSAA를 쓰지 않겠음
-> UINT Quality
샘플링을 몇번 반복할 것인가?
반복횟수가 많을수록 더 많이 뭉갠다.
Quality는 최대 32까지만 가능하다.

*D3D12_FEATURE
CheckFeatureSupport를 사용하면 최고로 지원가능한 QUALITY_LEVEL를 알려준다.

*스왑 체인 생성

MakeWindowAssociation 함수 -> 
DXGI_MWA_NO_ALT_ENTER로 설정하면 Alt + Enter를 
사용하여 창, 전체화면 모드 전환(Device에서 제공하는)을 막을 수 있다.

* DXGISwapChain
GetBuffer함수
Present함수

수직회귀 -> 모니터가 스와핑을 줄여나가도록 한다. 
	프레임레이트 => 프레임 / n번 으로 나올것.

만약 창모드일 경우 다른 윈도우가 가리고 있을 경우에는 Swapchain이 동작하지 않을것이고 그 결과값을 반환한다.
(어차피 가리고 있는데 머하러 그려)

입체 영상 출력을 위한 Swap_chain을 사용하고 싶으면 DXGI_SWAP_CHAIN_DESC1 구조체를 채워 CreateSwapChainForHwnd 함수를 써야한다.
SWAP_CHAIN을 두개 만들어야 한다. 오른쪽눈 왼쪽눈 그래야 입체적으로 보인다. 이 스왑체인은 기존 스왑체인과 다르게 투명 출력이 가능하다.






