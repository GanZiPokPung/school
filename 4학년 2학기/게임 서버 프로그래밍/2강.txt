1. 멀티쓰레드
게임 서버 -> 정확성(No Bug), 성능(렉이없다, 빠른반응)[FPS,동접]

2. 네트워크

게임서버 : 온라인 게임 서버 -> network



서버(리소스를 가지고 있는 애, Request의 응답) <---> 클라이언트(리소스를 요청하는 애, Request를 함)


# 컴퓨터 네트워크

LAN, 별 위상

OSI 모델(OSI 7 Layer) -> 비효율 적이여서 아무도 쓰지 않는다.
현재는 인터넷 TCP/IP를 사용한다. (4 Layer)

* File I/O -> Open, Close (read, write) (=>운영체제 호출)
		(-> 기본)

Network I/O -> Connect, Close (read, send) (=>운영체제 호출)


*스트림 송신 횟수와 수신 횟수는 불일치할 수도 있음(같은 컴퓨터는 괜찮다. 하지만 다른 컴퓨터 송신에 문제 생길 수 있음)

대역폭-> 10MB ~ 1G

% 네트워크 데이터의 양 -> 너무 많이 보내면 느리다.., 적게 보내면 처리해야할 데이터가 적어 빠르다.
헤더 -> 데이터를 보낼때 헤더도 붙는다.(헤더의 크기도 더해진다.)
네트워크 뿐만 아니라 운영체제도 그렇다.


    클라이언트 <-----------------> 서버
(이동위치, 공격, 채팅)--> <--(다른 객체 이동위치, 다른 객체 액션(공격, 죽음, 상태 등), 채팅, 인벤토리) 

무슨 데이터 인가?(종류) -> 데이터 종류에 따른 각종 요구 데이터들

패킷(Packet) -> 한묶음 
네트워크 뿐만 아니라 운영체제도 패킷을 통해 컴퓨터가 송신한다.

서버에서 패킷을 클라이언트로 보내는 것이다. 마찬가지로 클라이언트에서도 서버에 패킷을 보낸다.
어떻게 보낼지는 프로그래머가 정한다.

*단편화(fragmentation)

1만 바이트 스트림 혹은 데이터 -> 1000바이트 패킷으로 쪼갬(운영체제에서) -> 1만 바이트 스트림 혹은 데이터
패킷으로 조각내고 다시 스트림으로 복원

네트워크 딜레이에 따라 쪼갠 데이터를 나중에 보내 문제가 생길 수도 있다.