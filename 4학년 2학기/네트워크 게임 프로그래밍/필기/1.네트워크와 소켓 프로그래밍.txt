개요
*TCP/IP 프로토콜의 동작 원리
*소켓의 기본 개념
*윈도우 소켓의 역사와 특징
*윈도우 소켓 프로그램을 작성하고 실행하는 과정

호스트(응용프로그램<->TCP/IP프로토콜(운영체제)) <-> 라우터(IP를 보내면 어느 라우터로 보내주는 기능.) 
<---인터넷--->
라우터 <-> (TCP/IP프로토콜(운영체제)<->응용프로그램)호스트




호스트 
-> 최종 사용자 응용 프로그램을 수행하는 주체

라우터
-> 네트워크에 속한 호스트 간에 데이터를 교환할 수 있는 장비(IP)

통신 프로토콜
-> 호스트<>호스트 라우터<>라우터 간의 통신을 하기 위한 규약

TCP/IP 프로토콜
-> 인터넷의 핵심 프로토콜
-> 운영체제에서 일부 구현이 되어 있기 때문에 사용자는 라이브러리를 사용하여 구현한다.

여러 하드웨어에도 TCP/IP 통신을 위해 그것에 맞는 운영체제나 칩이 들어가 있다.
(윈도우 혹은 리눅스)

#TCP/IP 프로토콜 구조
계층구조

*네트워크 접근 계층(데이터링크 계층/물리 계층)
이더넷 : 48비트 물리 주소(수정 절대 불가능)

*인터넷 계층(네트워크 계층)
IP : 소프트웨어에서 쓰이는 논리주소(수정, 변경 가능)

물리주소 + 논리주소 ---> 유니크 한 주소(중복 안됨)

*전송 계층(전송 계층)
TCP -> 보낸 데이터를 꼭 받아야 하는 신뢰되는 상황 (느림)(정확성, 안정성 보장)
UDP -> 보낸 데이터가 꼭 받을 필요가 없는 상황 (빠름)(정확성, 안정성 보장 못함)

ThreeHandshaking -> 요즘은 안쓰임 (느려서)

*TCP와 UDP

*응용 계층

*송신측
헤더를 계속 붙여나감(TCP, IP, 이더넷)

*수신측
헤더를 까나감(TCP, IP, 이더넷)

*패킷 전송 형태

*IP 주소

*포트번호
인터넷 통신의 종착점을 나타내는 식별자

*클라이언트-서버 모델
클라우드 게임

CS(Client Service)

서버(Listener) <------- 클라이언트

*데이터 타입
-> 파일 입출력과 비슷함
*통신 종단점
프로토콜, IP주소, 포트번호
*네트워크 프로그래밍 인터페이스
라이브러리를 만들어버리는 개발자가 많음 (소켓 인터페이스)

*윈도우 소켓(윈속)
초창기에는 조잡했다.
DLL을 사용하므로 DLL초기화 종료작업 함수가 필요하다.

*윈속의 단점
응용 프로그램 수준을 프로토콜은 프로그래머가 직접 설계
->모든 소켓의 단점이다.

*윈속 구조.