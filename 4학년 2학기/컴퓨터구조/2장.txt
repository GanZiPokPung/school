# CPU의 구조와 기능

*CPU가 수행하는 세부적인 동작

1. 명령어 인출
-> 기억장치로 부터 명령어를 읽어온다.
2. 명령어 해독
-> 수행해야 할 동작을 결정하기 위하여 명령어를 해독한다.
3. 데이터 인출
-> 명령어 실행을 위하여 데이터가 필요한 경우에는 기억장치 혹은 IO장치로 부터 
그 데이터를 읽어온다.
4. 데이터 처리
-> 데이터에 대한 산술적 혹은 논리적 연산을 수행한다.
5. 데이터 저장
-> 수행한 결과를 저장한다.

1~2 => 모든 명령어들에 대하여 공통적으로 수행
3~5 => 필요한 경우에만 수행

*1.CPU의 기본 구조

산술논리연산장치(Arithmetic and Logical Unit : ALU)
레지스터 세트(Register set)
제어 유니트(Control unit)

ALU 
=> 각종 산술 연산들, 논리 연산들을 수행하는 회로들로 이루어진 하드웨어 모듈
합, 차, 곱, 나눔 and AND, OR, NOT 연산 등.

레지스터 
=> CPU 내부에 위치한 기억장치 (엑세스 속도가 가장 빠르다.)
but, 많은 수의 레지스터들을 CPU에 포함시키기 어려움 (적다)

제어 유니트
=> 프로그램 코드(명령어)를 해석하고 그것을 실행하기 위해 제어 신호들을
순차적으로 발생하는 하드웨어 모듈이다.

CPU 내부버스
=> 데이터와 제어 신호들의 전송 통로 (CPU내부에서만)

*2.명령어 실행

명령어 사이클
=> 한 개의 명령어를 실행하는 데 필요한 전체 과정

명령어 인출, 명령어 실행
인출 사이클, 실행 사이클

-명령어 실행을 위해 기본적으로 필요한 CPU 내부 레지스터
1. 프로그램 카운터 (PC)
=> 다음에 인출될 명령어의 주소를 가지고 있는 레지스터. 
각 명령어가 인출된 후에는 자동적으로 1이 증가되며, 분기명령어가 실행되는 경우에는
그 목적지 주소로 갱신된다.

2. 누산기(Accumulator : AC)
=> 데이터를 일시적으로 저장하는 레지스터
이 레지스터의 비트 수 => CPU에서 한번에 연산처리할 수 있는 비트 수(단어 길이)

3. 명령어 레지스터 (IR)
=> 가장 최근에 인출된 명령어가 저장되는 레지스터

4. 기억장치 주소 레지스터 (MAR)
=> 프로그램 카운터에 저장된 명령어의 주소가 시스템 주소 버스로 출력되기 전에
일시적으로 저장되는 주소 레지스터 => CPU외부 주소 버스 선들과 직접 접속됨

5. 기억장치 버퍼 레지스터 (MBR)
=> 기억장치에 저장될 데이터 혹은 기억장치로부터 읽혀진 데이터가 일시적으로 저장되는 버퍼 레지스터
==> CPU외부 데이터 버스 선들과 직접 접속된다. 

*2.1 인출 사이클
==> 기억장치의 지정된 위치로부터 명령어를 읽어오는 과정
CPU => 프로그램 명령어 => 프로그램 카운터가 가리키는 => 기억장치의 위치로부터 명령어를 인출해온다.

마이크로 연산 => CPU 클록의 한 주기 동안 수행되는 기본적인 동작

*2.2 실행 사이클
==> CPU가 인출된 명령어 코드를 해독(decode)하고, 그 결과에 따라 필요한 연산을 수행한다.
CPU가 수행하는 연산들은 다음과 같다.

1. 데이터 이동 : CPU가 기억장치 간 혹은 CPU와 I/O 장치 간에 데이터를 이동한다.

2. 데이터 처리 : 데이터에 대하여 산술 혹은 논리 연산을 수행한다.

3. 데이터 저장 : 연산결과 데이터 혹은 입력장치로부터 읽어들인 데이터를 기억장치에 저장

4. 프로그램 제어 : 프로그램의 실행 순서를 결정한다.

LOAD => 기억장치에 저장되어 있는 데이터를 CPU 내부 레지스터인 AC로 적재하는 명령어
STA => AC 레지스터의 내용을 기억장치에 데이터 저장을 위한 명령어
ADD => 기억장치에 저장된 데이터를 AC 레지스터의 내용과 더하고, 그 결과를 다시 AC레지스터에 저장하는 명령어
JUMP => 분기(branch)명령어라고도 한다. 현재 PC내용이 가리키는 위치가 아닌 다른 위치의 명령어로 실행 순서를 바꾸도록 해주는 명령어

기계어 
(연산 코드)(오퍼 랜드)

프로그램 실행 과정 : 인출 => 실행의 연속이다.

*2.3 인터럽트 사이클
인터럽트란 ?
=> 대부분의 컴퓨터들은 프로그램 처리 중에 CPU로 하여금 순차적인 명령어 실행을 중단하고 다른 프로그램을 처리하도록 요구할 수 있는 메커니즘을 제공해주는데 메커니즘을 인터럽트라고 부른다.

=> 정상적인 프로그램 처리의 흐름을 방해하는 동작이나.. 정전과 같은 긴급한 상황에 대처하거나 외부 장치들과의 상호 작용을 위해서 반드시 필요한 기능이다. 

인터럽트 요구가 들어오게 되면, CPU는 원래 프로그램 수행을 중단하고, 요구된 인터럽트를 처리해주기 위한 프로그램을 먼저 수행한다.  ==> 이것을 인터럽투 서비스 루틴(Interrupt service routine : ISR)이라고 한다.
인터럽트에 대한 처리가 끝나면, CPU는 원래의 프로그램으로 복귀하여 그 수행을 계속한다.

이를 위해 CPU는 아래와 같은 동작들을 수행해야 한다.
1. 인터럽트 요구 신호가 들어오면, 다음에 실행할 명령어의 주소를 가리키는 현재의 PC내용을 스택에 저장한다. 이것은 인터럽틀 처리를 완료한 후에 복귀할 주소를 저장해두기 위한 절차이다.
2. 해당 인터럽트 서비스 루틴을 호출하기 위하여 그 루틴의 시작 주소를 PC에 적재한다. 이때 시작 주소는 인터럽트를 요구한 장치로부터 전송되거나 미리 정해진 값으로 결정된다.

==> 이 과정을 인터럽트 사이클이라고 한다.

하지만 AC에 저장된 값이 IRS로 인해 나중에 다시 수행할때 예상하지 못한 결과값이 나올 수가 있다.
그래서 스택에 레지스터 내용을 저장하였다가, 루틴 마지막 단계에서 원래 프로그램으로 복귀하기 직전에 다시 그들을 복원 시켜주는 절차가 필요하다
==> 다중 인터럽트

*2.4 간접 사이클
=> 연산에서 사용될 데이터의 주소가 기억장치의 어떤 위치에 저장되어 있고, 명령어에 포함되어 있는 주소는 그 위치를 가리키고 있는 것이다. 이런 경우에 실행 사이클이 시작되기 전에, 그 데이터의 실제 주소를 기억장치로부터 읽어오는 과정이 먼저 수행되어야 한다. 이 과정을 간접 사이클이라고 한다.

인출 사이클과 실행 사이클 사이에 위치한다.

#명령어 파이프라이닝

*3.1 2단계 명령어 파이프라인 

