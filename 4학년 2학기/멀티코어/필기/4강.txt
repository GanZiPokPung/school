공유 메모리를 쓰레드가 동시에 읽고 쓴다.

lock, unlock은 정말 느리다. => system call

근데 저번 시간까지 했던 것들은 싱글 쓰레드보다 느렸다...

# Atomic
- 모든 Atomic연산은 다른 Atomic연산과 동시에 수행되지 않는다.
- Atomic연산은 이전의 명령어의 실행이 모두 끝날 때 까지 시작되지 않는다.
- Atomic연산 이후의 명령어는 Atomic연산이 완전히 종료한 후에 시작된다.
- 모든 Atomic연산의 실행 순서는 모든 쓰레드에서 동일하게 관찰된다.

*연산이 중간에 끼어들면 안된다.(문제가 생길 수 있다)

어셈블리어는 해결책이 안된다. => CPU가 바뀔때 실행이 불가능하다.
=> C++을 사용하자!

# C++11에서 Atomic

#include <atomic>
std::atomic <int> sum;

=> Lock을 걸지 않아도 Atomic하게 동작한다.
=> 하지만 _asm lock이랑 처리속도가 거의 비슷하다.. 한마디로 느리다.

-volatile과 차이는?
-Atomic의 한계

sum = sum + 2;는 왜 안되는가?
=> Atomic + Atomic != Atomic 이라서

# 정답은?
- 처음 부터 Data Race가 적도록 프로그램을 재작성 하는 것이 좋다.
=>Lock이나 Atomic연산 개수를 줄일 수 있다.
-하지만, Lock이나 Atomic연산을 완전히 없애는 것은 불가능 하다.
(이 뜻은 쓰레드 간의 커뮤니케이션을 없앤다는 것과 같다)

=> 이제 쓰레드 개수만큼 lock unlock을 하자.. => 빨라지긴 했지만 싱글코어와 거의 비슷하다. => 동시에 실행하지 않는다. 다른 CPU는 놀고있음

=> 지역변수를 선언하여(volatile) => 연산을 바친 지역변수를 전역변수에 연산해준다. (이때는 lock, unlock이 필요하다)
==> 오! 이러니까 싱글코어보다 훨씬 빨라졌다!

# 정리
- 병렬 컴퓨팅이란?
- 쓰레드란 뭔가?
- 왜 멀티쓰레드 프로그래밍을 해야 하는가?
- 멀티쓰레드 프로그래밍은 어떻게 하는가? - C++
- 멀티쓰레드 프로그래밍의 어려움 - Data Race, 성능

# Case Study
# 멀티쓰레드 프로그래밍의 사용처
-과학 기술 계산
*오래전부터...(기상청, 우주산업, 등등)
-멀티 미디어
*Encoding & Decoding (코어의 갯수가 많아지면 더 빠르게 해줌)
*멀티쓰레드의 구현이 매우 쉬움 => 독립된 장면들
-게임
*온라인 게임 서버 1997(리니지)년 부터
*3D 게임엔진 2000년대 중반 부터
==> 사실.. 게임 말고는 멀티 프로그래밍쓸만한 곳이 드뭄
==> 게임만큼 멀티프로그래밍을 적극적으로 사용하는 곳이 없음

NC가 아직도 떵떵거리는 이유 => 컨텐츠? X => 바로 서버기술

-클라이언트
화려하고 리얼하게 하는것 => 그건 쉬움
화려하고 리얼하지만 성능까지 나오는것 => 정말 어렵다.

# Unreal
=> Unity는 성능이 안나옴... (그래서 캐쥬얼 게임만 나오는 상황)
=> 유니티는 멀티쓰레드를 안함 => 어려우니까...

==> 매출의 30% 떼줘야됨... (엔진써서 매출이 나면)

=> 호환성이 좋음 (PC, PS4, XBOX_One, IOS, Android)
=> Heterogeneous 멀티쓰레딩

*3개의 주 쓰레드
*많은 개수의 Worker Thread 쓰레드
-주 쓰레드가 생산한 작업을 병렬 수행.
(Game Thread, Rendering Thread, Audio Thread)
작업들을 잘게잘게 쪼개서 떠넘겨줄수 있는건 넘겨준다.

1. Game Thread => 물리 계산이 Main(연산이 많이 걸림)
충돌처리 (연산이 많이 걸림)
네트워킹, 상태처리 등, 액터

2. Render Thread
컬링, 어떤 프레임을 보여줄것인지

3. Audio Thread
3D 사운드, 오디오 파일 형식에 따른 디코딩

#3D API의 변천
- OpenGL -> Vulkan
(핸드폰에서 OpenGL을 많이 씀)
=> Native multithreading (중요 이유!)

-DirectX 12
=> 너무 로우레벨이고 힘들다.. 어렵다..
거의 OpenGL에서 Vulkan가는 레밸급
멀티쓰레드 쓰라고 해놓은거임..

#멀티쓰레드 프로그래밍 종류
- Heterogeneous 멀티쓰레딩
쓰레드마다 맡은 역할이 다름
다른 Code Part를 실행
쓰레드간의 Load Balancing이 힘들다. (어떤 쓰레드는 노는 경우)
병렬성이 제한 => 그래서 언리얼은 콘솔에서 문제가...
=> 그나마 쉽다. 서로 분할되어 있으므로.

- Homogeneous 멀티쓰레딩
Data/Event Driven 프로그래밍 => 다 똑같다.
모든 쓰레드는 Symmetric하다
자동적인 load balancing, 제한없는 병렬성
작업 분배 Queue를 비롯한 일반적인 병렬 자료구조 필요
(코어에 따른 성능 향상이 더 크다)

#MMORPG Game Server

#MMORPG Game Server의 구현
멀티쓰레드 + Network I/O API인 IOCP사용

-Homogeneous Multithreading
Worker thread의 pool을 사용

모든 처리는 worker thread에서 처리

#멀티 쓰레드 트릭 #1 : DataBase query

#멀티 쓰레드 트릭 #2 : NPC AI

-Worst Case Tuning
-컨테이너 자료구조를 사용한 객체간 동기화
Custom 자료구조
-Thread & Cache affinity
옆의 코어 Read하지 않도록... => 수업시간에는 다루지 않음.
=> 대학원과정...
CPU 낭비 OK 최대 부하일때 잘 버티는 프로그램이 최고임..